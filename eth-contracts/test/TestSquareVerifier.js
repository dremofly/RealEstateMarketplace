// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('SquareVerifier')
var fs = require('fs')
var path = require('path')
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

contract('SquareVerifier', accounts => {
    const account_one = accounts[0];

    describe('load', function () {
        beforeEach(async function() {
            this.contract = await verifier.new({from: account_one});
        })

        it('Test verification with correct proof', async function () {
            let file = path.join(__dirname, 'proof.json')
            let json = fs.readFileSync(file, 'utf-8')
            data = JSON.parse(json)
            let input = data.inputs;
            let proof = data.proof;
            let res = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, input)
            assert.equal(res, true, "The return value should be true.");
        })

        it('Test verification with incorrect proof', async function () {
            let file = path.join(__dirname, 'wrong.json')
            let json = fs.readFileSync(file, 'utf-8')
            data = JSON.parse(json)
            let input = data.inputs;
            let proof = data.proof;
            let res = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, input)
            assert.equal(res, false, "The return value should be false.");
        })
    })
})    
// Test verification with incorrect proof
